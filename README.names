$Id: README.names,v 1.2 2011/08/02 18:59:28 jpmorgen Exp $

$Log: README.names,v $
Revision 1.2  2011/08/02 18:59:28  jpmorgen
Release to Tom
Fix up for current state of affairs

Revision 1.1  2011/08/01 19:18:16  jpmorgen
Initial revision


README.names -- Documentation of naming conventions for PFO system

PFO FUNCTIONS:

pfo_<fname>__fdefine: Register function fname in the dynamic list of
	pfo functions using pfo_fdefine.  Also registers the number of
	parameters, if known (0 parameters indicates number of
	parameters of this function might vary -- e.g. pfo_poly).
	Called by pfo_parinfo_new.  TODO: make a routine that searches
	the entire IDL_PATH to register all pfo functions.

pfo_<fname>__init: Called by pfo_parinfo_new after
	pfo_<fname>__fdefine to create a new strand of parinfo for
	function <fname>.  Accepts keyword parameters that help
	initilize the new parinfo.  Intermediate processing of the
	strand (e.g. with the pfo_link system) might be necessary.
	After intermediate processing, the strand should be joind to
	an existing parinfo with pfo_array_append and then
	pfo_parinfo_update should be called to automatically sort out
	any interdependencies

pfo_<fname>__calc: Called by pfo_parinfo_parse to calculate function
	fname given the input axis specified in parinfo.pfo.inaxis,
	combined with the operation specified in parinfo.pfo.fop with
	the contents of parinfo.pfo.oaxis.  parinfo.pfo.infunct and
	parinfo.pfo.outfunct also operate, if specified.

pfo_<fname>__indices: Each __indices function has a list of keywords
	that correspond to the list of parameters in a particular
	function.  Many-to-one mapping is encouraged.  For instance,
	peak, area, width, wing are standard names, which might have
	other names appropriate for other functions (e.g. E0, f_low,
	f_high, etc.)  The indices into parinfo corresponding to the
	name of the keyword are returned on the keyword.

pfo_<fname>__print: Called by pfo_funct to print the function in the
	IDL command line window.  If no __print "method" is found in
	the pfo_<fname>__fdefine file (or anywhere else),
	pfo_null__print is used, which does a reasonably good job for
	simple functions

pfo_<fname>__widget: Called by pfo_funct to create a widget to display
	the function in IDL GUI format.  As with __print,
	pfo_null__widget is the fallback if the particular function
	doesn't have its own.

STRUCTURES:

<tagname>_struct__define: define the structure for a structure called
	tagname_struct.  This is a basic feature of IDL since version
	5 or so, but we expand on it with the function pfo_struct_new.
	<tagname>_struct__define will initialize tags to IDL "null"
	values.  This does not always serve our purposes.
	<tagname>_struct__init fixes this.

<tagname>_struct__init: called by pfo_struct_new(tagname).
	This function initializes the struct created by
	<tagname>_struct__define.  The analogy to the init method of
	an object reference is intended.  pfo_struct_new also
	optionally creates a parallel structure called descr, which
	contains the documentation for the tags in <tagname>_struct.

<tagname>_struct__set_tag: the analogy of a set_property method.
	Keywords correspond to tags

<tagname>_struct__get_tag: the analogy of a get_property method.
	Keywords correspond to tags

The routine pfo_struct_setget_tag calls the __set_tag and __get_tag
	"methods"


<parameter_optimizer>_parinfo_struct__define: currently only mpfit is
	supported.  This defines the top-level struct of the parinfo

WIDGETS:

pfo_<name>_cw: a compound widget.  Generally, these widgets operate on
	the property of the pfo_obj.  These widgets are usually
	controlled by an object, pfo_<name>_cw_obj, which is defined
	in the file pfo_<name>_cw.pro.  Generally compund widgets are
	meant to fit inside of larger widget bases.  However, in the
	pfo system, for ease of use, if no parent widget identifier is
	specified, a generic base is created in which the compund
	widget lives.

OBJECTS:

pfo_<name>_obj__define.pro: These files contain code that is collected
	together to define the pfo_obj.  In principle, everything
	under the PFO sun could be collected into pfo_obj.  In
	practice, a devision is made between the objects which control
	compound widgets and pfo_obj.  pfo_obj is intended primarily
	for data-storage object (data and parinfo) and has methods
	that focus on providing that data efficiently to external
	routines, such as the compound widget controlling objects.

pfo_<name>_cw_obj: an object, typically defined in the file
	pfo_<name>_cw.pro that serves as the "controlling object" of
	the widget, a la David Fanning's fsc_field.  Most of the time,
	these objects will encapsulate the pfo_obj


