README.pfo

The Parameter Function Objection (PFO) system is designed to create
and evaluate functions for the purpose of non-linear least-squares
fitting.  PFO has a GUI front-end, called pfo_fit.  For more
information about that program, see the file README.pfo_fit, or just
start that program in IDL.  On-screen help is limited at the moment,
but can easily be added....

PFO was inspired by the parameter optimization package "MPFIT" by
Craig Markwardt.  Like most modern parameter optimizers, MPFIT accepts
a user-defined kernel function name, a set of independent variables
(the X-axis) and a list of initial guesses for the parameters to the
kernel function.  MPFIT passes the independent variables and the
current set of parameter guesses on to the kernel function, which
calculates the model function, compares it to the data, and returns a
set of deviates.  MPFIT uses the deviates to calculate a new set of
parameter guesses.  We will treat the methods by which the new guesses
are generated as a "black box."  The goal of MPFIT is to find the set
of parameters that minimize the sum of the squares of the deviates
(the chi squared).

The key feature of MPFIT that inspired PFO is the "parinfo."  In
MPFIT, the parinfo is an array of type structure, one array element
per parameter, that defines properties of the parameters.  The tags in
the MPFIT parinfo structure can be as mundane as the parameter name
(.parname) and as sophisticated as instructions to the numeric
derivative algorithm (e.g. .relstep and .mpside).  Particularly useful
are .limits and .limited tags, which fix or free parameters, or
constrain them parameters to certain ranges.

PFO expands the MPFIT parinfo so that the entire function is defined
by the parinfo.  This is a key enabling technology.  Instead of
functions being a set of code that must be modified off-line and
recompiled when changes are needed, functions are data structures that
can be modified at run-time by intelligent algorithms or by user input
through a GUI.

The PFO system provides a set of libraries and templates which make it
easy for users to transform mathematical functions into segments of
parinfo.  See the file README.pfo_CZT for an example of how one
function definition file was transformed into another.  The function
definition files use naming conventions that resemble the IDL
object-oriented system, but, formally, they are just IDL routines.

The PFO parinfo was designed so that simple functions with no
parameter interrelations can be implemented without the need to
augment the parinfo structure.  The file README.pfo_CZT documents how
one function definition file, pfo_scint__fdefine.pro, was used as a
template to create another function definition file,
pfo_czt__fdefine.pro.  If you want to add your own function, start by
reading README.pfo_CZT.

The pfo_scint and pfo_CZT functions (particularly pfo_CZT) are
slightly more complicated than the default case.  The example shows
how the structure pfo_link can be easily added to the parinfo to deal
with this complication.  The pfo_link system is designed to handle
simple parameter interrelations in the PFO system.  Some functions
require even more complicated interrelations.  The information
necessary for managing these interrelations can be added as augments
to the parinfo structure and interpreted by the appropriate PFO
subsystems.  There is one subsystem that inteprets functions and their
arguments (the <fname>__fdefine.pro files) and another that interprets
parinfo tag definitions (the <tag>_struct__define.pro files).  See
README.names for details about the naming conventions used in these
systems.  README.names includes pointers to the PFO routines you will
need, which are, themselves reasonably well documented.

Once you have created a __fdefine.pro file and restarted IDL, your
function will be available in the "Add a new function" menu of
pfo_fit.  This may be all you need.  If you want to work with PFO from
the command line or other programs, you will need to learn how the
pfo_obj works.  See README.pfo_obj.

NOTE: because PFO (specifically pfo_parinfo_parse) has to parse the
parinfo every time the function is evaluated, function fits conducted
in the PFO system will take longer than fits conducted with more
traditional hard-coded kernels.  If your problem does not require a
GUI or run-time customization of the kernel function, you might be
better off using MPFIT "in the raw."

$Id: README.pfo,v 1.3 2012/01/13 20:59:18 jpmorgen Exp $

