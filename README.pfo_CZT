Fri Nov 18 16:57:40 2011  jpmorgen@sandusky

This is a log of how I created the pfo_CZT function.

First, find a __fdefine.pro file that defines a function that is
similar to the one you want to define.  In this case
pfo_bgo__fdefine.pfo defines a function very similar to the CZT function.

Copy pfo_bgo__fdefine.pfo to pfo_czt__fdefine.pro.  Note that IDL is
case insensitive in a funny way.  You can program in any case you
like, but when compiling, IDL homogenizes the case of your code.
Thus, when searching for a file to automatically compile, it cannot
have mixed case.  Some people find this so annoying that they name
files with mixed case and then explicitly compile them.  Personally, I
just use all lower case for filenames and code in mixed case (mostly
lower case).

In the new file, do some easy things like replace all occurrences of
pfo_scint with pfo_CZT.

Following the object-oriented way of doing things, I like to modify
the code from the bottom up.  

We need to know how many parameters we are going to use.  This
depends, of course, on your function.  If your function uses a
variable number of parameters, like pfo_poly, use npars=0.  It is in
your best interest to document your function throughly at this point
in the fdescr string.  The fnames, fnpars and fdescr values get put
into a structure called the pfo_fstruct_array which is maintained by
the pfo_finfo routine.  See documentation in pfo_finfo.pro for more
info.

INIT "METHOD:" As much as possible, I have tried to minimize the
amount of code you have to modify, but in the end, some tedious typing
is needed to establish good naming conventions for parameters of your
particular function.

Start from the top of the __init method and go line by line.  I have
listed the function-specific names for parameters (e.g. EO) first and
then, after some programmatic keywords, like value, ftype, and
pfo_obj, listed the generic names for parameters (e.g. "peak" for E0,
"width" for sigma, "wings" for f_wings).  Note: IDL has a "nice"
feature of letting users abbreviate keywords when routines are
invoked.  However, this generates problems with ambiguities.  So the
CZT parameter f can't just be a keyword "f," it has to be something
that doesn't overlap with f_step, or any other keyword that begins
with f.  So "f" has become "f_wings."

The only thing you need to change in the error catching block is the
list of keywords.  Omit the _in, since those are for internal purposes
only (helps to not overwrite variables on the outside of your routine).

The next couple of lines about improper use of value and ftype and
getting fnum and fnpars are generic and should not need to change.

Now we make our parinfo.  As the comment says, we use
pfo_parinfo_template to make one parinfo array element.  We are trying
to get the right set of tags in our parinfo.  By default, the only
tags included in a parinfo are those for MPFIT, so every call to
pfo_parinfo_template should also have at least required_tags='pfo'.
This add the structure pfo_struct (defined in pfo_struct__define),
which has several tags needed for the basic functioning of the PFO
system.  In the case of the CZT function, we need to link some of the
parameters together so that our resolution function works properly.
Thus, we also include the pfo_link tag, which, itself, is a structure
tha thas tags useful for linking.

The replication of the parinfo template should be generic code and not
need to change (fnpars was defined above in similarly generic code).
Note that putting the fname string into the parinfo structure is done
with the fname() call so that the code should not need to change when
you copy this to a new function (see discussion of ftype in comments
and below).

Now there is some tedium.  You need to set the parameter names to the
right values.  parnames is one of the original MPFIT tags, so it is at
the top level of the structure.  parinfo.parname references that
array, so you can assign it directly to an array of type string.
Alternately, you could do assignments like parinfo[0].parname = 'Peak
energy'.  Note the array index is on parinfo, not parname, since
parinfo is the array.

I assign parnames in two ways so that you can have long or short names
depending on the value of the PFO system variable !pfo.longnames.  The
current default is for long names.

FTYPE: This is a PFO enhancement to the parinfo structure, so it lives
in the parinfo.pfo sub-structure on parinfo.pfo.ftype.  For simple
functions, the decimal portion of ftype is how parameters of an
individual function are differentiated from each other.  The integer
part of ftype is how individual functions are identified.  The integer
part is automatically assigned by pfo_fdefine and maintained using the
pfo_parinfo_update procedure.  The decimal part, well, you just have
to do the tedious assignments yourself.

Note that for the CZT function, I had to make sure that I started with
decimal ftype = 0.01, since there are more than 9 parameters.  The
decimal ftype is how *parameters* are differentiated from each other.
The integer part of the ftype is how *functions* are differentiated
from each other.

The attentive programmer will note that storing decimal values in a
floating point variable that has a variable integer part is a recipe
for precision problems.  I struggled over this decision.  In the end,
I figured that there were enough bits in a single-precision floating
point variable to specify just about any simple function (see
pfo_poly__fdefine, for an example of how complicated you can get).
Just remember when trying to get your parameter back, to take the
fractional part of ftype, multiply by the appropriate value and round
to get back into more precise integer land (see __indices method).

There are some functions for which a decimal ftype may not give you
the amount of information you need to differentiate between individual
parameters.  Or maybe you want to store more information in the
parinfo for handy external reference (e.g. line catalog information),
or provide some stroage space to ease calculation of your function.
In these cases, you can create your own sub-struture and make it a
required tag in your call to pfo_parinfo_template.  See
pfo_struct_new.pro and the STRUCTURES part of README.names for some
documentation about the PFO tools that are available for parinfo tag
creation and maintenance.  Memory management note: when you add tags
to one function in your parinfo, since parinfo is an array of type
struct, those tags are also appended to all other elements in the
parinfo.  For most functions and with modern machines with many gigs
of RAM, this should not be a problem, but I think it is important to
be honest about this limitation of the PFO system.

VALUE: This is more tedious typing.  The idea is to check to see if
someone has _not_ specified a parameter on the command line and, in
that case, assign a default.  I also allow people to specify single
values for things that end up needing to be vectors.  This code has a
mix of careful and not careful assigments of default values.  Probably
it would be better to label every input parameter as _in and assign it
to a local variable, if it exists and then check to see if that local
variable exists before assigning it.  This is the way the
"vectorizing" code does it.  When we don't do it this way, default
values can get unintentionally exported.  Here is an example

parinfo = pfo_parinfo_new('pfo_CZT', E0=E0)

In order to allow input _and_ output to/from keywords, IDL lets you
make this call even if E0 is undefined.  Because of the way we wrote
our code, E0 will come back set to 0.  Some might think it should
remain undefined, like sigma, alpha, mu, and f.  Others think return
of default values is a handy way to probe the mind of the developer of
the underlying routine.  You decide which you prefer.

Once we have values for everything, we assign them to the
parinfo.value tag.  This is an original MPFIT parinfo tag and, for
MPFIT, represents the initial value of a fit.  In PFO value is also
used to represent the final value of the fit.  This is an important
distinction and will come up again when we work with the params array
in the __calc method.

Limits and limited work together (see MPFIT documentation if this
doesn't make intuitive sense).  Note that consecutive array indices
can be specified in IDL using the ':' notation.  Also note that limits
and limited are arrays themselves, so if you just wanted to tweak the
upper limit of the 10th parameter, it would be something like
parinfo[9].limits[1] = 2 (IDL starts arrays at 0).

Linking parameters together is something that is accomplished using
the pfo_link tag, which we made sure to add to our parinfo_template.
There are two kinds of automatic linking "interlinking" and
"intralinking."  Inter means between two functions of the same type.
Intra means between two parameters in the same function.  We have
examples of both in the pfo_CZT function.

The final command in the __init method hands any "extra" keywords off
to the pfo_struct_setget_tag system.  This is a handy way to assign
values to tags anywhere in the parinfo.  Modifying our example, above,
we could have used:

parinfo = pfo_parinfo_new('pfo_CZT', E0=E0, iROI=0)

In this case, each top-level tag in the parinfo would be searched for
a <tag>_struct__set_tag routine.  The "extra" keyords are passed to
each of these routines.  Assigning extra tag values in this way
doesn't imply The keywords have to exist on any particular level of
the parinfo tag structure: the <tag>_struct__set_tag routine decides
that.  See pfo_struct_new and pfo_struct_setget_tag for more details.

IDL programming note: The _EXTRA or _REF_EXTRA mechanisms allow the
routine to pass any extra keywords not explicitly listed in the
routine declaration onto subsequent routines.  _EXTRA passes by value,
_REF_EXTRA passes by reference.  So if you need a return value, or
want to sve memory, _REF_EXTRA is the one to use.  Interesting note,
not documented by IDL, illustrated by the following little set of
programs:

pro test2, ignored
    print, ignored
end
pro test, _REF_EXTRA=extra
    test2, ignored=2, _EXTRA=extra
end
test, ignored=1

This means that keywords passed via _REF_EXTRA override keywords
provided internally.  Sometimes handy, sometimes maddening.  Many
people prefer _EXTRA, since you always know what you are going to get.

CALC "METHOD:" This is designed so that very little needs to change
from function to function except the indexing into params and, of
course, the math.

A note on "params:" these are the parameter values that MPFIT tweaks
to actually fit your function to the data.  If the fit is successful,
then params are written into parinfo.value by the pfo_obj->fit()
function.  While you are calculating the function, always work from
params!  In simple function, params are usually sufficient to
calculate the function.  More complicated functions that have added
their own tags may make use of the pfo_obj passed to the _calc method.

Also note: IDL cannot pass sub-arrays by reference.  In other words,
if you try to pass parinfo[idx] to a PFO routine that you expect to
modify your parinfo, you will be sorely disappointed.  IDL copies
parinfo[idx] in this case.  The only way to get back individually
modified array elements is to pass the whole array.  The good news is
that it doesn't cost you any memory.  The bad news is that you always
have to carry around idx as another parameter.  You will see a
consistent use of the idx keyword in all PFO software.  This is
intended to be the generic index into parinfo.

INDICES "METHOD:" Many of the keywords in the indices method are
copies of the keywords in the __init method.  These keywords generally
output the indices (into parinfo and params) of the parameters they
correspond to.  Indices methods, like the __init methods, should be
written to allow both function-specific and standard keywords to be
used (e.g E0 and peak).  As with the __init method, there is some
tedious typing to do.  Oh, I should mention that since most of these
methods get called by higher-level routines, there is not much need
for CATCHing errors.  Just raising errors with the "message" command
is good enough.

Naming convention: personally, I like to append _idx to all variables
that represent indices.  I thought about starting the __indices
methods out in that direction, but that would mean everyone would have
to type an extra "_idx" per parameter when they copied their keywords
from their _init methods.  I opted for brevity: if you are calling an
indices method, you expect to get indices back.  In my own code, I
make the transition from variable names that may be mistaken for
values into variable names that are clearly indices:

idx = pfo_obj->indices(peak=peak_idx)

Note: there is nothing to prevent __indices methods from returning
derived values which are not indices.  The pfo_poly "order" keyword is
such a value: there is no parameter in the parinfo that represents the
order of a polynomial -- the only parameters are the polynomial
coefficients and a few other things I came up with (see
pfo_poly__fdefine).

You are now done with the code!

You might want to adjust the documentation at the top of the code, but
personally for these object-oriented type things, with multiple
routines defined in the file, the standard documentation string
doesn't quite capture everything.  I have adopted David Fanning's
method for documenting keywords on individual lines and brief
documentation above each routine.  Besides, you have a nice
description of the function in the fdescr value down in the __fdefine
section, right?

You might also want to add a note just below the RCS $Log, indicating
which file you copied to create this one.  This will help the full log
make sense.

Check the file into revision control.

TEST IT: to test a new function, you need to make sure your IDL_PATH
is refreshed and the pfo_fit (or gpaw) widget is restarted.  The
easiest way to do this is to just exit and restart IDL.  You might
also find it useful to use the pfo_debug command to pop your command
line out right at the point of the code where any error may occur.

Below is an example of code used to test pfo_CZT:

pfo_debug, 2
data = mrdfits('~jpmorgen/pro/grand/FITS.fits')
gpaw, data.czt[*, 2], pfo_obj=pfo_obj
pfo_obj->set_property, plot_Xin_range=[200,800]
pfo_obj->append_parinfo, 'pfo_ROI', ROI=[320,430], iroi=0
pfo_obj->append_parinfo, 'pfo_CZT', peak=385, iroi=0

pfo_obj->append_parinfo, 'pfo_ROI', ROI=[625,764], iroi=1
pfo_obj->append_parinfo, 'pfo_CZT', peak=650, iroi=1
pfo_obj->append_parinfo, 'pfo_CZT', peak=732, iroi=1

$Id: README.pfo_CZT,v 1.2 2012/01/13 21:03:15 jpmorgen Exp $

$Log: README.pfo_CZT,v $
Revision 1.2  2012/01/13 21:03:15  jpmorgen
*** empty log message ***

Revision 1.1  2011/11/21 13:11:36  jpmorgen
Initial revision

