;+
; NAME: pfo_quiet
;
; PURPOSE: Control verbosity of IDL messages generated by PFO routines
;
; CATEGORY: PFO
;
; CALLING SEQUENCE: pfo_quiet, [level]
;
; DESCRIPTION: Uses the IDL system variables !quiet and !except to
; control the verbosity of IDL messages generated by PFO code.  PFO
; code that is affected looks like:

; message, /INFORMATIONAL, 'NOTE: this is a message'

; Math errors are also (optionally) affected.

; See also pfo_debug.

; INPUTS: level: quiet level
;	0: normal IDL verbosity
;	1: turn off "message, /INFORMATIONAL" messages (IDL's !quiet=1)
;	2: turn off math exception messages (IDL's !except=0)
; If level is not specified, 2 is used
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS:
;
; OUTPUTS:
;
; OPTIONAL OUTPUTS:
;
; COMMON BLOCKS:  
;   Common blocks are ugly.  Consider using package-specific system
;   variables.
;
; SIDE EFFECTS:
;
; RESTRICTIONS:
;
; PROCEDURE:
;
; EXAMPLE:
;
; MODIFICATION HISTORY:
;
; $Id: pfo_quiet.pro,v 1.1 2011/08/01 19:18:16 jpmorgen Exp $
;
; $Log: pfo_quiet.pro,v $
; Revision 1.1  2011/08/01 19:18:16  jpmorgen
; Initial revision
;
;-
pro pfo_quiet, level
  init = {tok_sysvar}
  init = {pfo_sysvar}

  ON_ERROR, !tok.return
  message, /CONTINUE, 'Current quiet level: ' + strtrim(!pfo.quiet, 2) 

  if N_params() eq 0 then begin
     message, /CONTINUE, 'USAGE: pfo_debug, level (0 = normal, 1 = INFORMATIONAL messages not printed, 2 = math exceptions not printed (see also pfo_debug)'
     return
  endif


  !pfo.quiet = level

  case level of
     0: begin ;; default
        ;; Print messages created with message, /INFORMATION
        !quiet = 0
        ;; Check to see if we are stomping on the math exception
        ;; opinions of pfo_debug
        if !except gt 1 then begin
           message, /INFORMATIONAL, 'NOTE: the !except system variable, which indicates if math exceptions (e.g. underflow, divide by 0, etc.) should be reported, is set to ' + strtim(!except, 2) + '. I will reset it to 1 (IDL default, which is a bit quieter).  If you really wanted all those reports, simply call pfo_debug, 3, or set !except=2 by hand.'
           !except = 1
        endif
     end
     1: begin ;; quiet the INFORMATIONAL messages
        !quiet = 1
        if !except gt 1 then begin
           message, /CONTINUE, 'NOTE: the !except system variable, which indicates if math exceptions (e.g. underflow, divide by 0, etc.) should be reported, is set to ' + strtim(!except, 2) + '. I will reset it to 1 (IDL default, which is a bit quieter).  If you really wanted all those reports, simply call pfo_debug, 3, or set !except=2 by hand.'
           !except = 1
        endif
     end
     2: begin ;; quiet all math exception messages too
        !quiet = 1
        !except = 0
     end
     else: begin
        message, /CONTINUE, 'NOTE: quiet levels 0,1,2 are supported, setting to level 1'
        pfo_quiet, 2
     end
  endcase
  message, /CONTINUE, 'Current quiet level: ' + strtrim(!pfo.quiet, 2) 
end
